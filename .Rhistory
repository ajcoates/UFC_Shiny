g + geom_histogram(aes(x=depth), binwidth = 0.1, position = position_stack(reverse=TRUE)
g = ggplot(diamonds,aes(x=price))
g + geom_histogram(aes(x=depth), binwidth = 0.1, position = position_stack(reverse=TRUE)
g + geom_histogram(aes(x=depth), binwidth = 1, position = position_stack(reverse=TRUE)
g + geom_histogram(aes(x=depth), binwidth = .5, position = position_stack(reverse=TRUE)
g = ggplot(diamonds,aes(x=price))
g = ggplot(data = diamonds,aes(x=price))
g + geom_histogram(aes(x=depth), binwidth = .5, position = position_stack(reverse=TRUE)
g + geom_bar(aes(x=depth), binwidth = .5, position = position_stack(reverse=TRUE)
g = ggplot(data = diamonds,aes(x=price))
g = ggplot(data = diamonds,aes(x=price))
g = ggplot(data = diamonds,aes(x=price))
g + geom_bar(aes(x=depth), binwidth = .5)
g + geom_bar(aes(x=depth), binwidth = .1)
facet_wrap(~ cut)
g <- ggplot( data = diamonds, aes(x = depth))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
g + geom_histogram(binwidth = 0.1) + facet_wrap( ~ cut) + zoom
geom_histogram()
g = ggplot(data = diamonds,aes(x=price))
geom_histogram()
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.1) + facet_wrap( ~ cut) + zoom
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.1) + facet_wrap( ~ cut) + zoom
g = ggplot(data = diamonds,aes(x=price))
geom_histogram(aes(fill = cut))
g = ggplot(diamonds,aes(x=depth))
zoom <- coord_cartesian(xlim = c(55, 70))
geom_freqpoly(binwidth = .2) +
facet_wrap(~ cut) + zoom
g = ggplot(data = diamonds,aes(x=price))
geom_histogram(aes(fill = cut))
?mpg
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
ggplot(data = mpg,mapping - aes(x+displ,y=hwy))
geom_point()
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
geom_point() +
+ geom_smooth()
geom_smooth() using method = 'loess' and formula 'y ~ x'
ggplot(data = mpg,mapping = aes(x=displ,y=hwy)) +
geom_point() + geom_smooth(method = 'lm')
g = ggplot(data = mpg.mpaping = aes(x=displ,y=hwy))
library(ggplot2)
?mpg
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
ggplot(data = mpg,mapping - aes(x+displ,y=hwy))
geom_point()
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
g = ggplot(data = diamonds,aes(x=price))
geom_histogram(aes(fill = cut))
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.1) + facet_wrap( ~ cut) + zoom
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.1) + facet_wrap( ~ cut) + zoom
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
install.packages('ggplot2')
library(ggplot2)
?mpg
g <- ggplot( data = diamonds, aes(x = depth))
they are separated into separate fa
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
View(mpg)
View(mpg)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
g <- ggplot( data = diamonds, aes(x = price))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.1) + facet_wrap( ~ cut) + zoom
g <- ggplot( data = diamonds, aes(x = depth))
they are separated into separate fa
plot(iris$Sepal.Width, iris$Sepal.Length)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data = mpg,mapping - aes(x+displ,y=hwy))
geom_point()
ggplot(data = mpg,mapping = aes(x=displ,y=hwy))
geom_point() +
+ geom_smooth()
geom_smooth() using method = 'loess' and formula 'y ~ x'
ggplot(data = mpg,mapping = aes(x=displ,y=hwy)) +
geom_point() + geom_smooth(method = 'lm')
g = ggplot(data = mpg.mpaping = aes(x=displ,y=hwy))
g + geom+point(aes(color = class))
g + geom+point(aes(size = class))
g + geom_point(aes(alpha = class))
plot(g)
g <- ggplot( data = diamonds, aes(x = depth))
they are separated into separate fa
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
texas = read.csv('texas.csv')
head(texas)
library(readr)
texas <- read_csv("Downloads/texas.csv")
View(texas)
texas = read.csv('texas.csv')
head(texas)
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
library(ggplot2)
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
g + geom_polygon(aes(group = group))
g + geom_abline(aes(group = group))
g + geom_point()
g + geom_abline(aes(group = group))
g + geom_point()
g + geom_abline(aes(group = group))
g + geom_density(aes(group = group))
g + geom_point(aes(group = group))
g + geom_polygon(aes(group = group))
install.packages('maps')
library(maps)
counties = map_data('county')
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
install.packages('maps')
install.packages("maps")
library(maps)
counties = map_data('county')
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
library(ggplot2)
counties = map_data('county')
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
head(texas)
library(ggplot2)
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
g + geom_polygon(aes(group = group))
install.packages('maps')
library(maps)
counties = map_data('county')
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
install.packages("maps")
install.packages("maps")
library(maps)
counties = map_data('county')
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
tx = g + geom_polygon(aes(group = group, fill = bin))`
tx
tx = g + geom_polygon(aes(group = group, fill = bin))`
tx = g + geom_polygon(aes(group = group, fill = bin))`
tx = g + geom_polygon(aes(group = group, fill = bin))
tx
tx2 = tx + ggtitle("Population of Texas Counties")
texas = read.csv('texas.csv')
g = ggplot(data = texas, aes(x = long, y = lat))
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
g + geom_polygon(aes(group = group))
library(maps)
counties = map_data('county')
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
library(ggplot2)
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
g + geom_polygon(aes(group = group))
library(maps)
counties = map_data('county')
ggplot(data = countries,aes(x=long,y=lat)) + geom_polygon(aes(group = group, fill = group))
tx = g + geom_polygon(aes(group = group, fill = bin))
tx
tx2 = tx + ggtitle("Population of Texas Counties")
tx2
tx = g + geom_polygon(aes(group = group, fill = bin))
tx
tx2 = tx + ggtitle("Population of Texas Counties")
tx2
head(texas)
tx = g + geom_polygon(aes(group = group, fill = bin))
tx
tx2 = tx + ggtitle("Population of Texas Counties")
tx2
head(texas)
library(ggplot2)
texas = read.csv("data/texas.csv")
head(texas)
head(texas)
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_point()
g + geom_polygon(aes(group = group))
tx2
head(texas)
tx = g + geom_polygon(aes(group = group, fill = bin))
tx
tx2 = tx + ggtitle("Population of Texas Counties")
tx2
library(ggplot2)
texas = read.csv("data/texas.csv")
head(texas)
library(ggplot2)
texas = read.csv("data/texas.csv")
head(texas)
install.packages("ggplot2")
library(ggplot2)
texas = read.csv("data/texas.csv")
head(texas)
library(ggplot2)
texas = read.csv("data/texas.csv")
head(texas)
texas = read.csv("texas.csv")
head(texas)
library(ggplot2)
texas = read.csv("texas.csv")
head(texas)
library(ggplot2)
head(texas)
install.packages('ggplot2')
?mpg
data = mpg
data(mpg)
?mpg
data = mpg
?mpg
data = mpg
data(mpg)
data('mpg')
data = mpg
data
data = mpg
data
data$year
df = (data(mpg))
df$year
df = mpg
data$year
df$year
df %>%
select(df$year, df$cyl, df$cty, df$hwy)
library(dplyr)
?mpg
df = mpg
df$year
df %>%
select(df$year, df$cyl, df$cty, df$hwy)
install.packages('ggplot2')
library(dplyr)
?mpg
df = mpg
df$year
df %>%
select(df$year, df$cyl, df$cty, df$hwy)
library(dplyr)
?mpg
df = mpg
df$year
df %>%
select(df$year, df$cyl, df$cty, df$hwy)
df$year, df$manufacturer
df$manufacturer
library(dplyr)
df %>% select(., manufacturer)
df %>% select(., manufacturer, year)
df %>% select(., year, cyl, cty, hwy)
library(ggplot2)
head(texas)
ggplot(data + mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = cty)) + scale_color_gradient(low = 'green',high = 'purple')
ggplot(data = mpg, aes(x =
displ, y = hwy)) +
geom_point(aes(color = cty))
last_plot() +
scale_color_gradient(low =
"red", high = "yellow")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = cty))
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
tx + scale_fill_brewer(palette = 'OrRd')
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = mpg, aes(x =asdfas
install.packages("addinslist")
library(addinslist
)
library(addinslist)
install.packages("addinslist")
library(addinslist)
library(addinslist)
source('~/.active-rstudio-document', echo=TRUE)
version
library(addinslist)
install.packages("addinslist")
library(addinslist)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
DOHMH_New_York_City_Restaurant_Inspection_Results <- read_csv("Documents/R/Data_Visualization_Lab/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
View(DOHMH_New_York_City_Restaurant_Inspection_Results)
shiny::runApp('workspace/UFC_Shiny/app.R')
library(shiny)
library(shinydashboard)
data <- read.csv(file = "ufc_bind_top20", stringsAsFactors = FALSE)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
runApp('workspace/UFC_Shiny/app.R')
library(shiny)
library(shinydashboard)
data <- read.csv(file = "ufc_bind_top20", stringsAsFactors = FALSE)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui, server)
runApp('workspace/UFC_Shiny/app.R')
library(shiny)
library(shinydashboard)
data <- read.csv(file = "ufc_bind_top20", stringsAsFactors = FALSE)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("bar")
)
server <- function(input, output) {}
shinyApp(ui, server)
library(ggplot2)
library(shiny)
library(plotly)
data(diamonds, package = "ggplot2")
nms <- names(diamonds)
ui <- fluidPage(
headerPanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min = 1, max = nrow(diamonds),
value = 1000, step = 500, round = 0),
selectInput('x', 'X', choices = nms, selected = "carat"),
selectInput('y', 'Y', choices = nms, selected = "price"),
selectInput('color', 'Color', choices = nms, selected = "clarity"),
selectInput('facet_row', 'Facet Row', c(None = '.', nms), selected = "clarity"),
selectInput('facet_col', 'Facet Column', c(None = '.', nms)),
sliderInput('plotHeight', 'Height of plot (in pixels)',
min = 100, max = 2000, value = 1000)
),
mainPanel(
plotlyOutput('trendPlot', height = "900px")
)
)
server <- function(input, output) {
#add reactive data information. Dataset = built in diamonds data
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$trendPlot <- renderPlotly({
# build graph with ggplot syntax
p <- ggplot(dataset(), aes_string(x = input$x, y = input$y, color = input$color)) +
geom_point()
# if at least one facet column/row is specified, add it
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .') p <- p + facet_grid(facets)
ggplotly(p) %>%
layout(height = input$plotHeight, autosize=TRUE)
})
}
shinyApp(ui, server)
runApp('workspace/UFC_Shiny/app.R')
install.packages("plotly")
runApp('workspace/UFC_Shiny/app.R')
setwd("/home/arlisscoates/workspace/UFC_Shiny")
##Testing working directory(wd)
getwd()
##Loading tidyverse; contains dplyr and ggplot2
library(tidyverse)
##Loading data: "data.csv" within > "/home/arlisscoates/Documents/R/ArlissUFC/Shiny_Data"
ufc_data <- read.csv("data.csv")
##Set of data from csv including win_by and fight_type
ufc_data_raw <- read.csv("raw_total_fight_data.csv", sep=';')
names(ufc_data) <- tolower(names(ufc_data))
names(ufc_data_raw) <- tolower(names(ufc_data_raw))
##Concatenating ufc_data and ufc_data_raw in ufc_bind
ufc_bind <- data.frame(ufc_data$r_fighter,ufc_data$b_fighter,ufc_data$referee,ufc_data$date,ufc_data$weight_class,ufc_data$title_bout,ufc_data_raw$win_by,ufc_data_raw$last_round,ufc_data_raw$last_round_time,ufc_data_raw$winner)
##Translates all variable names to lowercase
names(ufc_bind) <- tolower(names(ufc_bind))
##Renaming variable names NOTE: when running this again, the right side of "=" must be given the correct column name; i.e "r_fighter" will be "ufc_data.r_fighter". This is the result of having run the code in pieces (after the first, R recognizes r_fighter is r_fighter, not ufc_data.r_fighter)
ufc_bind <- rename(ufc_bind, r_fighter = ufc_data.r_fighter, b_fighter = ufc_data.b_fighter, referee = ufc_data.referee, date = ufc_data.date, weight_class = ufc_data.weight_class, title_bout = ufc_data.title_bout, win_by = ufc_data_raw.win_by, last_round = ufc_data_raw.last_round, last_round_time = ufc_data_raw.last_round_time, winner = ufc_data_raw.winner)
##top 20 refs
ufc_bind_top20 = filter(ufc_bind, referee == 'Herb Dean' | referee == 'John McCarthy' | referee == 'Mario Yamasaki' | referee == 'Dan Miragliotta' | referee == 'Marc Goddard' | referee == 'Yves Lavigne' | referee == 'Steve Mazzagatti' | referee == 'Leon Roberts' | referee == 'Keith Peterson' | referee == 'Josh Rosenthal' | referee == 'Chris Tognoni' | referee == 'Jason Herzog')
##ufc_bind_top20 by interventions (decision vs non-decision)
#ufc_bind_stoppage <- ufc_bind_top20 %>% for (win in ufc_bind_top20$win_by)
#  if(win == "KO/TKO" | win == "Submission" | win == "DQ"){
#   gsub(win, "Stoppage", ufc_bind_top20$win_by)}
#    else{
#     gsub(win,"Decision", ufc_bind_top20$win_by)
#  }
##
###Better solution than for loop and conditional above:
ufc_bind_top20 <- ufc_bind_top20 %>% mutate(stoppage_decision = case_when(grepl("KO/TKO",win_by) ~ "Stoppage",
grepl("Submission",win_by) ~ "Stoppage",
grepl("Could Not Continue",win_by) ~ "Stoppage",
grepl("DQ",win_by) ~ "Stoppage",
grepl("TKO - Doctor's Stoppage",win_by) ~ "Stoppage",
grepl("Decision - Unanimous",win_by) ~ "Decision",
grepl("Decision - Majority",win_by) ~ "Decision",
grepl("Other",win_by) ~ "NA",
grepl("Overturned",win_by) ~ "NA",
grepl("Decision - Split",win_by) ~ "Decision"))
##writing new csv "ufc_bind_top20"
ufc_bind_top20 <- write.csv(ufc_bind_top20, "ufc_bind_top20.csv")
###Better solution than for loop and conditional above:
ufc_bind_top20 <- ufc_bind_top20 %>% mutate(stoppage_decision = case_when(grepl("KO/TKO",win_by) ~ "Stoppage",
grepl("Submission",win_by) ~ "Stoppage",
grepl("Could Not Continue",win_by) ~ "Stoppage",
grepl("DQ",win_by) ~ "Stoppage",
grepl("TKO - Doctor's Stoppage",win_by) ~ "Stoppage",
grepl("Decision - Unanimous",win_by) ~ "Decision",
grepl("Decision - Majority",win_by) ~ "Decision",
grepl("Other",win_by) ~ "NA",
grepl("Overturned",win_by) ~ "NA",
grepl("Decision - Split",win_by) ~ "Decision"))
##Renaming variable names NOTE: when running this again, the right side of "=" must be given the correct column name; i.e "r_fighter" will be "ufc_data.r_fighter". This is the result of having run the code in pieces (after the first, R recognizes r_fighter is r_fighter, not ufc_data.r_fighter)
ufc_bind <- rename(ufc_bind, r_fighter = ufc_data.r_fighter, b_fighter = ufc_data.b_fighter, referee = ufc_data.referee, date = ufc_data.date, weight_class = ufc_data.weight_class, title_bout = ufc_data.title_bout, win_by = ufc_data_raw.win_by, last_round = ufc_data_raw.last_round, last_round_time = ufc_data_raw.last_round_time, winner = ufc_data_raw.winner)
##Concatenating ufc_data and ufc_data_raw in ufc_bind
ufc_bind <- data.frame(ufc_data$r_fighter,ufc_data$b_fighter,ufc_data$referee,ufc_data$date,ufc_data$weight_class,ufc_data$title_bout,ufc_data_raw$win_by,ufc_data_raw$last_round,ufc_data_raw$last_round_time,ufc_data_raw$winner)
##Translates all variable names to lowercase
names(ufc_bind) <- tolower(names(ufc_bind))
##Renaming variable names NOTE: when running this again, the right side of "=" must be given the correct column name; i.e "r_fighter" will be "ufc_data.r_fighter". This is the result of having run the code in pieces (after the first, R recognizes r_fighter is r_fighter, not ufc_data.r_fighter)
ufc_bind <- rename(ufc_bind, r_fighter = ufc_data.r_fighter, b_fighter = ufc_data.b_fighter, referee = ufc_data.referee, date = ufc_data.date, weight_class = ufc_data.weight_class, title_bout = ufc_data.title_bout, win_by = ufc_data_raw.win_by, last_round = ufc_data_raw.last_round, last_round_time = ufc_data_raw.last_round_time, winner = ufc_data_raw.winner)
##top 20 refs
ufc_bind_top20 = filter(ufc_bind, referee == 'Herb Dean' | referee == 'John McCarthy' | referee == 'Mario Yamasaki' | referee == 'Dan Miragliotta' | referee == 'Marc Goddard' | referee == 'Yves Lavigne' | referee == 'Steve Mazzagatti' | referee == 'Leon Roberts' | referee == 'Keith Peterson' | referee == 'Josh Rosenthal' | referee == 'Chris Tognoni' | referee == 'Jason Herzog')
###Better solution than for loop and conditional above:
ufc_bind_top20 <- ufc_bind_top20 %>% mutate(stoppage_decision = case_when(grepl("KO/TKO",win_by) ~ "Stoppage",
grepl("Submission",win_by) ~ "Stoppage",
grepl("Could Not Continue",win_by) ~ "Stoppage",
grepl("DQ",win_by) ~ "Stoppage",
grepl("TKO - Doctor's Stoppage",win_by) ~ "Stoppage",
grepl("Decision - Unanimous",win_by) ~ "Decision",
grepl("Decision - Majority",win_by) ~ "Decision",
grepl("Other",win_by) ~ "NA",
grepl("Overturned",win_by) ~ "NA",
grepl("Decision - Split",win_by) ~ "Decision"))
##writing new csv "ufc_bind_top20"
ufc_bind_top20 <- write.csv(ufc_bind_top20, "ufc_bind_top20.csv")
##Bar plot of title bouts vs non title, referee
ggplot(data=ufc_bind_top20) +
geom_bar(aes(x=ufc_bind_top20$referee,fill=ufc_bind_top20$title_bout)) +
labs(title='Referees By Experience',
x='Referee',
y='# of bouts') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
##top 20 refs
ufc_bind_top20 = filter(ufc_bind, referee == 'Herb Dean' | referee == 'John McCarthy' | referee == 'Mario Yamasaki' | referee == 'Dan Miragliotta' | referee == 'Marc Goddard' | referee == 'Yves Lavigne' | referee == 'Steve Mazzagatti' | referee == 'Leon Roberts' | referee == 'Keith Peterson' | referee == 'Josh Rosenthal' | referee == 'Chris Tognoni' | referee == 'Jason Herzog')
###Better solution than for loop and conditional above:
ufc_bind_top20 <- ufc_bind_top20 %>% mutate(stoppage_decision = case_when(grepl("KO/TKO",win_by) ~ "Stoppage",
grepl("Submission",win_by) ~ "Stoppage",
grepl("Could Not Continue",win_by) ~ "Stoppage",
grepl("DQ",win_by) ~ "Stoppage",
grepl("TKO - Doctor's Stoppage",win_by) ~ "Stoppage",
grepl("Decision - Unanimous",win_by) ~ "Decision",
grepl("Decision - Majority",win_by) ~ "Decision",
grepl("Other",win_by) ~ "NA",
grepl("Overturned",win_by) ~ "NA",
grepl("Decision - Split",win_by) ~ "Decision"))
##Bar plot of title bouts vs non title, referee
ggplot(data=ufc_bind_top20) +
geom_bar(aes(x=ufc_bind_top20$referee,fill=ufc_bind_top20$title_bout)) +
labs(title='Referees By Experience',
x='Referee',
y='# of bouts') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
##bar plot referee and win_by
ggplot(data=ufc_bind_top20) +
geom_bar(aes(x=ufc_bind_top20$referee,fill=ufc_bind_top20$win_by)) +
labs(title='Referees By Experience',
x='Referee',
y='Number of matches') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
